import org.ajoberstar.gradle.git.release.opinion.Strategies
import org.ajoberstar.grgit.Grgit

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'org.ajoberstar:gradle-git:1.4.0-rc.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'
//      classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

apply plugin: 'java'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.ajoberstar.release-base'
apply plugin: 'com.github.johnrengelman.shadow'

release {
    grgit = Grgit.open(file('.'))
    versionStrategy Strategies.FINAL
    versionStrategy Strategies.PRE_RELEASE
    defaultVersionStrategy Strategies.SNAPSHOT
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
group = 'net.serenity-bdd'

repositories {
    mavenLocal()
    jcenter()
    maven {
        url 'http://dl.bintray.com/serenity/maven/'
    }
}

mainClassName = 'net.serenitybdd.cli.Serenity'

ext {
    bintrayBaseUrl = 'https://api.bintray.com/maven'
    bintrayRepository = 'maven'
    bintrayPackage = 'serenity-cli'
    projectDescription = 'Serenity CLI'
    groovyVersion = '3.0.3'
    junitVersion = '4.13.1'
    commonsCollectionsVersion = '3.2.2'
    xmlApisVersion = '1.4.01'

    if (!project.hasProperty("bintrayUsername")) {
        bintrayUsername = 'wakaleo'
    }
    if (!project.hasProperty("bintrayApiKey")) {
        bintrayApiKey = ''
    }
    serenityCoreVersion = '2.3.10'
    serenityJiraPluginVersion = '1.12.0'
}

//task wrapper(type: Wrapper) {
//    gradleVersion = '4.0'
//}

bintrayBaseUrl + '/serenity/maven/serenity-cli'

bintray {
    user = bintrayUsername
    key = bintrayApiKey
    publications = ['shadow']
    pkg {
        repo = 'maven'
        name = 'serenity-cli'
        userOrg = 'serenity'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/serenity-bdd/serenity-cli'
        version {
            name = "${project.version}"
            desc = 'Serenity BDD CLI version ${project.version}'
            released = new Date()
            vcsTag = "${project.version}"
        }
    }

}

test {
    include '**/When*'
    maxParallelForks = Runtime.runtime.availableProcessors()
    testLogging {
        exceptionFormat = 'full'
//        showStandardStreams = true
    }
}

jar {
    println "Publishing $project.name:$project.group:$project.version"

    manifest {
        attributes(
            "Implementation-Title": "Serenity CLI Plugin",
            "Implementation-Version": project.version.toString(),
            'Main-Class': mainClassName
        )
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

configurations.all {
    resolutionStrategy {
        //failOnVersionConflict()
        force "commons-collections:commons-collections:${commonsCollectionsVersion}"
        force "xml-apis:xml-apis:1.4.01:${xmlApisVersion}"
        force "com.google.code.gson:gson:2.8.2"
        force "commons-codec:commons-codec:1.10"
        force "org.apache.httpcomponents:httpmime:4.5.4"
    }
}

dependencies {
    compile("net.serenity-bdd:serenity-model:${project.serenityCoreVersion}") {
        exclude module: "htmlunit-driver"
    }
    compile("net.serenity-bdd:serenity-reports:${project.serenityCoreVersion}") {
        exclude module: "htmlunit-driver"
    }
    compile("net.serenity-bdd:serenity-jira-plugin:${project.serenityJiraPluginVersion}") {
        exclude group: "net.serenity-bdd", module: "serenity-core"
    }
    compile 'args4j:args4j:2.33'
    compile("ch.qos.logback:logback-classic:1.1.7") {
        exclude group: "org.slf4j"
    }

    compile('com.googlecode.lambdaj:lambdaj:2.3.3') {
        exclude group: "org.objenesis"
        exclude group: "cglib"
    }

    testCompile('org.spockframework:spock-core:2.0-M3-groovy-3.0') {
        exclude group: "junit"
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }

    compile ('org.codehaus.groovy:groovy-all:3.0.3'){
        exclude module: 'groovy-jaxb';
        exclude module: 'groovy-xml';
    }
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
          project.shadow.component(publication)

          pom.withXml {
              asNode().children().last() + {
                  resolveStrategy = Closure.DELEGATE_FIRST
                  name 'serenity-cli'
                  description 'Serenity CLI'

                  url 'https://github.com/serenity-bdd/serenity-cli'
                  scm {
                      url 'scm:git:git@github.com:serenity-bdd/serenity-cli.git'
                      connection 'scm:git:git@github.com:serenity-bdd/serenity-cli.git'
                      developerConnection 'scm:git:git@github.com:serenity-bdd/serenity-cli.git'
                  }
                  licenses {
                      license {
                          name 'The Apache Software License, Version 2.0'
                          url 'http://www.apache.org/license/LICENSE-2.0.txt'
                          distribution 'repo'
                      }
                  }
                  developers {
                      developer {
                          id 'johnsmart'
                          name 'John Ferguson Smart'
                          email 'john.smart@wakaleo.com'
                      }
                  }
              }
              // Preserve compile-scope dependencies
              asNode().dependencies.'*'.findAll() {
                  it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                      dep.name == it.artifactId.text()
                  }
              }.each() {
                  it.scope*.value = 'compile'
              }
          }
        }
/*
        shadow(MavenPublication) {
            from components.shadow

            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'serenity-cli'
                    description 'Serenity CLI'

                    url 'https://github.com/serenity-bdd/serenity-cli'
                    scm {
                        url 'scm:git:git@github.com:serenity-bdd/serenity-cli.git'
                        connection 'scm:git:git@github.com:serenity-bdd/serenity-cli.git'
                        developerConnection 'scm:git:git@github.com:serenity-bdd/serenity-cli.git'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'johnsmart'
                            name 'John Ferguson Smart'
                            email 'john.smart@wakaleo.com'
                        }
                    }
                }
                // Preserve compile-scope dependencies
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
*/
        mavenJava(MavenPublication) {

            println "Publishing $project.name:$project.group:$project.version"

            from components.java

            artifact sourcesJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'serenity-cli'
                    description 'Serenity CLI'

                    url 'https://github.com/serenity-bdd/serenity-cli'
                    scm {
                        url 'scm:git:git@github.com:serenity-bdd/serenity-cli.git'
                        connection 'scm:git:git@github.com:serenity-bdd/serenity-cli.git'
                        developerConnection 'scm:git:git@github.com:serenity-bdd/serenity-cli.git'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'johnsmart'
                            name 'John Ferguson Smart'
                            email 'john.smart@wakaleo.com'
                        }
                    }
                }
                // Preserve compile-scope dependencies
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }
}

uploadShadow {
    repositories {
        mavenDeployer {
            repository(url: bintrayBaseUrl + '/serenity/maven/serenity-cli') {
                authentication(userName: bintrayUsername, password: bintrayApiKey)
            }
        }
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

task copyDeps(type: Copy) {
    from configurations.runtime + configurations.testCompile
    into project.projectDir.path + "/lib"
}
